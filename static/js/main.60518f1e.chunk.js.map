{"version":3,"sources":["components/Weather/loader.gif","components/OpenWeather/index.ts","components/Weather/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","TemperatureScale","API_URL","API_KEY","process","OpenWeather","zipCode","units","Fahrenheit","requestUrl","fetch","response","json","data","Error","cod","message","this","parseResponse","forecastData","list","forEach","line","weekDay","Date","dt_txt","toLocaleString","weekday","push","forecast","cityName","weather","city","name","Object","keys","day","averageTemp","Math","ceil","reduce","a","b","main","temp","length","iconId","id","dayOfWeek","Weather","state","scale","error","openWeather","getForecastByZipCode","props","updateForecast","getWeatherForecast","setState","todaysForecast","shift","className","map","i","key","checked","htmlFor","type","placeholder","defaultValue","maxLength","onChange","e","target","value","onlabel","offlabel","onstyle","offstyle","Celsius","renderForecast","src","loader","alt","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.60518f1e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.31cdfb1e.gif\";","\r\nexport enum TemperatureScale {\r\n    Fahrenheit,\r\n    Celsius\r\n}\r\n\r\nexport interface OpenWeatherAPIResponse {\r\n    city: {\r\n        coord: {\r\n            lat: number,\r\n            long: number\r\n        },\r\n        country: string,\r\n        name: string,\r\n        sunrise: number,\r\n        sunset: number,\r\n        timezone: number\r\n    },\r\n    cnt: number,\r\n    cod: string,\r\n    list: any[],\r\n    message: string\r\n}\r\n\r\nexport interface Forecast {\r\n    cityName: string,\r\n    weather: Array<{ dayOfWeek: string, temp: number, iconId: number }>\r\n}\r\n\r\nconst API_URL = 'https://api.openweathermap.org/data/2.5/forecast';\r\nconst API_KEY = process.env.REACT_APP_OPENWEATHER_API_KEY;\r\n\r\nexport default class OpenWeather {\r\n\r\n    /**\r\n     * Get five day forecast by zip code from OpenWeatherMap.org API\r\n     * @param zipCode\r\n     * @param units\r\n     */\r\n    async getForecastByZipCode(zipCode: string, units: TemperatureScale = TemperatureScale.Fahrenheit): Promise<Forecast> {\r\n\r\n        let requestUrl = API_URL +\r\n            `?zip=${zipCode},us` +\r\n            `&appid=${API_KEY}` +\r\n            '&' + ((units === TemperatureScale.Fahrenheit) ? 'units=imperial' : 'units=metric');\r\n\r\n        let data: OpenWeatherAPIResponse,\r\n            response;\r\n\r\n        try {\r\n            response = await fetch(requestUrl);\r\n            data = await response.json();\r\n        } catch (e) {\r\n            throw new Error(e);\r\n        }\r\n\r\n        if (data.cod === \"404\") {\r\n            throw new Error(data.message);\r\n        }\r\n\r\n        return this.parseResponse(data);\r\n    }\r\n\r\n    /**\r\n     * Creates a new object with less data for widget display.\r\n     * @param response\r\n     * @return Forecast\r\n     */\r\n    parseResponse(response: OpenWeatherAPIResponse): Forecast {\r\n\r\n        let forecastData = {} as any;\r\n\r\n        response.list.forEach(line => {\r\n            const weekDay = new Date(line.dt_txt).toLocaleString('en-us', {weekday: 'short'});\r\n\r\n            if(!forecastData[weekDay]) {\r\n                forecastData[weekDay] = [];\r\n            }\r\n\r\n            forecastData[weekDay].push(line);\r\n        });\r\n\r\n        let forecast: Forecast = {\r\n            cityName: '',\r\n            weather: []\r\n        };\r\n        forecast.cityName = response.city.name;\r\n\r\n        const daysOfWeek = Object.keys(forecastData);\r\n\r\n        daysOfWeek.forEach(day => {\r\n\r\n            const sumTemperatures = (a:number, b:any) => a+b.main?.temp;\r\n\r\n            let averageTemp\r\n                = Math.ceil(forecastData[day].reduce(sumTemperatures, 0) / forecastData[day].length);\r\n\r\n            //Get weather description from first record of the day\r\n            let iconId = forecastData[day][0].weather[0].id;\r\n\r\n            forecast.weather.push({\r\n                dayOfWeek: day,\r\n                temp: averageTemp,\r\n                iconId: iconId\r\n            });\r\n        });\r\n\r\n        return forecast;\r\n    }\r\n\r\n}\r\n\r\n","import React from 'react';\r\nimport './style/index.scss';\r\nimport './style/weather-icons.min.css';\r\nimport loader from './loader.gif';\r\nimport OpenWeather, {Forecast, TemperatureScale} from '../OpenWeather';\r\nimport BootstrapSwitchButton from 'bootstrap-switch-button-react';\r\n\r\ntype WeatherProps = {\r\n    zipCode: string,\r\n};\r\n\r\ntype WeatherWidgetState = {\r\n    zipCode: string,\r\n    forecast: Forecast,\r\n    scale: TemperatureScale,\r\n    error: Error | null\r\n};\r\n\r\nclass Weather extends React.Component<WeatherProps, WeatherWidgetState> {\r\n\r\n    state: WeatherWidgetState = {\r\n        zipCode: '',\r\n        forecast: {} as Forecast,\r\n        scale: TemperatureScale.Fahrenheit,\r\n        error: null\r\n    };\r\n\r\n    async getWeatherForecast(zipCode: string, scale?: TemperatureScale): Promise<Forecast> {\r\n        if (zipCode.length !== 5) return {} as Forecast;\r\n\r\n        let openWeather = new OpenWeather();\r\n        return await openWeather.getForecastByZipCode(zipCode, scale);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const {zipCode} = this.props;\r\n        this.updateForecast(zipCode);\r\n    }\r\n\r\n    private async updateForecast(zipCode: string, scale?: TemperatureScale) {\r\n        let forecast: Forecast;\r\n\r\n        try {\r\n            forecast = await this.getWeatherForecast(zipCode, scale);\r\n            this.setState({zipCode, forecast, error: null});\r\n        } catch (e) {\r\n            this.setState({error: e});\r\n        }\r\n    }\r\n\r\n    renderError(message: string) {\r\n\r\n    }\r\n\r\n    renderForecast(forecast: Forecast) {\r\n        const todaysForecast = forecast.weather.shift();\r\n\r\n        return (\r\n            <div className=\"forecast__container\">\r\n                <div className=\"forecast__panel forecast__panel--city\">\r\n                    <div>{forecast.cityName}</div>\r\n                    <div>\r\n                        <i className={`wi wi-owm-${todaysForecast?.iconId}`}> </i>\r\n                    </div>\r\n                </div>\r\n                <div className=\"forecast__panel forecast__panel--today\">\r\n                    <strong>TODAY</strong>\r\n                    <div className=\"forecast__temp\">{todaysForecast?.temp}</div>\r\n                </div>\r\n                {\r\n                    forecast.weather.map((day, i) => {\r\n                        return (\r\n                            <div className=\"forecast__panel\" key={`${day}${i}`}>\r\n                                <div>{day.dayOfWeek}</div>\r\n                                <div className=\"forecast__temp\">{day.temp}</div>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const {forecast, error, scale} = this.state;\r\n        const checked = (scale === TemperatureScale.Fahrenheit);\r\n\r\n        return (\r\n            <div className=\"weather-widget\">\r\n                <div className=\"weather-widget__container\">\r\n                    <form className=\"form\">\r\n                        <div className=\"form__field\">\r\n                            <label htmlFor=\"zip\">ZIP</label>\r\n                            <input type=\"text\"\r\n                                   id=\"zipCode\"\r\n                                   placeholder=\"Zip Code\"\r\n                                   defaultValue={this.props.zipCode}\r\n                                   maxLength={5}\r\n                                   onChange={(e) => this.updateForecast(e.target.value, scale)}/>\r\n                            <BootstrapSwitchButton\r\n                                checked={checked}\r\n                                onlabel=\"&#8457;\"\r\n                                offlabel=\"&#8451;\"\r\n                                onstyle=\"primary\"\r\n                                offstyle=\"info\"\r\n                                onChange={(checked: boolean) => {\r\n                                    const scale = checked ? TemperatureScale.Fahrenheit : TemperatureScale.Celsius;\r\n                                    this.setState({scale}, () => {\r\n                                        this.updateForecast(this.state.zipCode, scale);\r\n                                    });\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        <div className={`forecast  ${!forecast.cityName ? \"forecast--loading\" : \"\"}`}>\r\n                            {forecast && forecast.cityName\r\n                                ? this.renderForecast(forecast)\r\n                                : error ?\r\n                                    <h2>{error?.message}</h2>\r\n                                    : <img className=\"forecast__loader\" src={loader} alt=\"loading\"/>\r\n                            }\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Weather;\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Weather from './components/Weather';\r\n\r\n// TODO: Add F/C toggle\r\n\r\nfunction App() {\r\n  return (\r\n      <div>\r\n          <Weather zipCode={\"32801\"}/>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}